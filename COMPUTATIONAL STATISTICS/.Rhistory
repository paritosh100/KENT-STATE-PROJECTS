library(alr4)
data("Downer")
View(Downer)
sum(is.na(new_data))
sum(is.na(Downer))
dim(Downer)
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv")]
Downer_df = na.omit(Downer_df)
dim(Downer_df)
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv")]
dim(Downer_df)
Downer_df = na.omit(Downer_df)
Downer = na.omit()
Downer = na.omit()
dim(Downer_df)
library(alr4)
data("Downer")
View(Downer)
sum(is.na(Downer))
dim(Downer)
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv")]
Downer_df = na.omit(Downer_df)
set.seed(123)
train_index = sample(1:nrow(Downer_df), size = 0.8*nrow(Downer_df), replace = FALSE)
train_data = Downer_df[train_index, ]
test_data = Downer_df[-train_index, ]
logistic_model = glm(outcome ~ calving  +  daysrec + ck + ast + urea + pcv, data = train_data, family = binomial("logit"))
train_data
Downer = na.omit()
Downer = na.omit(Downer)
dim(Downer)
data("Downer")
sum(is.na(Downer))
dim(Downer)
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv")]
Downer_df = na.omit(Downer_df)
dim(Downer_df)
Downer = na.omit(Downer)
dim(Downer)
set.seed(123)
train_index = sample(1:nrow(Downer_df), size = 0.8*nrow(Downer_df), replace = FALSE)
downer = na.omit(Downer)
dim(downer)
train_index = sample(1:nrow(downer), size = 0.8*nrow(downer), replace = FALSE)
train_data = downer[train_index, ]
test_data = downer[-train_index, ]
train_data
logistic_model = glm(outcome ~ calving  +  daysrec + ck + ast + urea + pcv, data = train_data, family = binomial("logit"))
train_index
train_index = sample(1:nrow(Downer_df), size = 0.8*nrow(Downer_df), replace = FALSE)
train_index
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv","outcome")]
Downer_df = na.omit(Downer_df)
dim(Downer_df)
data("Downer")
Downer_df = Downer[, c("calving", "daysrec", "ck", "ast", "urea", "pcv","outcome")]
Downer_df = na.omit(Downer_df)
dim(Downer_df)
train_index = sample(1:nrow(Downer_df), size = 0.8*nrow(Downer_df), replace = FALSE)
train_index
train_data = Downer_df[train_index, ]
test_data = Downer_df[-train_index, ]
logistic_model = glm(outcome ~ calving  +  daysrec + ck + ast + urea + pcv,
data = train_data, family = binomial("logit"))
library(caret)
confusionMatrix(logistic_model)
confusionMatrix(Downer_df)
confusionMatrix(data = test_data,reference = train_data)
predicted = predict(logistic_model,test_data)
confusionMatrix(test_data$outcome,predicted)
unique(test_data$outcome)
test_data$outcome = ifelse(test_data$outcome == "survived",1,0)
confusionMatrix(test_data$outcome,predicted)
library(InformationValue)
train_index = sample(1:nrow(Downer_df), size = 0.8*nrow(Downer_df), replace = FALSE)
train_index
train_data = Downer_df[train_index, ]
test_data = Downer_df[-train_index, ]
train_data
logistic_model = glm(outcome ~ calving  +  daysrec + ck + ast + urea + pcv,
data = train_data, family = "binomial" )
predicted = predict(logistic_model,test_data,type = "response")
confusionMatrix(prediction,test_data))
confusionMatrix(prediction,test_data)
confusionMatrix(predicted,test_data)
confusionMatrix(as.factor(predicted),as.factor(test_data))
confusionMatrix(as.factor(predicted),as.factor(test_data$outcome),positive = "TRUE")
predicted
table(test_data$outcome, predicted)
table(test_data$outcome, predicted)
test_data$outcome
predicted
predicted = predict(logistic_model,test_data,type = "response",cut = 0.5)
cutoff =
table(test_data$outcome, predicted)
table(test_data$outcome, predicted)
test_data$outcome
predicted
predicted = predict(logistic_model,test_data,type = "response",cutoff = 0.5)
table(test_data$outcome, predicted)
test_data$outcome
predicted
